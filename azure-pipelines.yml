parameters:
- name: browser
  displayName: 'Browser Options'
  type: string
  default: 'chrome'
  values:
  - 'chrome'
  - 'edge'
  - 'firefox'

schedules:
- cron: '45 10 28 12 *'
  displayName: Scheduled build
  branches:
    include:
    - main
  always: true

trigger:
- '*'

stages:
- stage: static_analysis
  jobs:
  - job: robocop
    pool:
      name: Default
      demands:
      - agent.name -equals Sample

    steps:
    - script: |
        python -m pip install --upgrade pip
        pip install robotframework-robocop
      displayName: 'Install Dependencies'

    - script: |
        robocop
      failOnStderr: true
      displayName: 'Static Code Analysis'

- stage: end_to_end_test
  condition: or(eq(variables['Build.Reason'], 'Manual'), eq(variables['Build.Reason'], 'Schedule'))
  jobs:
  - job: run_keyword_testcases
    timeoutInMinutes: 0
    pool:
      name: Default
      demands:
      - agent.name -equals Sample    

    steps:  
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install Dependencies'

    - script: |
        robot --variable BROWSER_NAME:${{ parameters.browser }} --pythonpath . -x outputxunit.xml -d reports VLMS5.0_Regression
      displayName: 'Run UI Tests'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'reports/outputxunit.xml'
        testRunTitle: 'TestRun_$(Build.Repository.Name)_$(Build.BuildNumber)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Robotframework Logs'
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: 'reports'
        ArtifactName: 'reports'
        publishLocation: 'Container'

- stage: parallel_run
  condition: eq(variables['Build.Reason'], 'Manual')
  jobs:
  - job: run_parallel_testcases
    timeoutInMinutes: 0
    pool:
      name: Default
      demands:
      - agent.name -equals Sample

    steps:
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install Dependencies'

    - script: |
        pabot --processes 2 --pythonpath . -x outputxunit.xml --argumentfile1 Pabot/QA-env.txt --argumentfile2 Pabot/Dev-env.txt -d parallel_run VLMS5.0_Regression
      displayName: 'Run UI Tests'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'parallel_run/outputxunit.xml'
        testRunTitle: 'TestRun_$(Build.Repository.Name)_$(Build.BuildNumber)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Robotframework Logs'
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: 'parallel_run'
        ArtifactName: 'parallel_run'
        publishLocation: 'Container'
